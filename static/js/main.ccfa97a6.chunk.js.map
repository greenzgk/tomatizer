{"version":3,"sources":["contexts/app-state-context.tsx","app-constants.ts","utils.ts","hooks/useTimer.ts","workers/timer.worker.ts","contexts/settings-context.tsx","hooks/useLocalStorage.ts","contexts/index.tsx","components/Button.tsx","components/AppBar.tsx","components/Card.tsx","components/CircularProgress.tsx","components/DigitalWatchFace.tsx","components/TextField.tsx","components/Duration.tsx","components/Emoji.tsx","components/Footer.tsx","components/Form.tsx","pages/timer/cards.tsx","pages/timer/Header.tsx","pages/timer/TimerPage.tsx","hooks/useNotification.ts","hooks/useDocumentTitle.ts","pages/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialAppState","count","status","nextAction","workMs","breakMs","AppStateContext","React","AppStateProvider","props","appState","setAppState","value","Provider","displayName","appStatusTitles","idle","break","work","format2digits","num","minimumIntegerDigits","toLocaleString","undefined","msToSecs","ms","Math","floor","msToMins","msToHours","getTimeString","hours","mins","secs","worker","Worker","DEFAULT_INTERVAL_MS","defaultSettings","longBreakInterval","shortBreakInterval","workInterval","workIntervalsCountBeforeLongBreak","SettingsContext","SettingsProvider","key","defaultValue","item","setItem","loadedItem","localStorage","getItem","JSON","parse","handleStorage","e","newValue","window","addEventListener","removeEventListener","newItem","stringify","useLocalStorage","settings","saveSettings","useSettings","context","Error","AppProviders","children","basename","ContainedButton","primary","secondary","className","clsx","IconButton","AppBar","AppBarTitle","AppBarAction","Card","CircularProgress","max","strokeWidth","strokeDashoffset","viewBox","xmlns","strokeDasharray","strokeLinecap","cx","cy","r","DigitalWatchFace","isDone","TextField","ref","type","Duration","onChange","setMs","hoursRef","minsRef","secsRef","textFieldProps","placeholder","min","target","match","Number","current","onFocus","select","Emoji","label","symbol","role","aria-label","Footer","Date","getFullYear","Form","FormItem","col","StatCard","StatCardHeader","StatCardBody","CountStatCard","TimeStatCard","Header","history","useHistory","onClick","push","TimerPage","useAppState","initialTimeout","interval","remainingMs","setRemainingMs","timeoutHandlerRef","tickHandlerRef","setStatus","onmessage","remaining","data","stop","postMessage","action","start","timeout","onTimeout","onTick","message","reset","useTimer","timerStatus","notify","Notification","permission","requestPermission","title","body","countdown","document","useDocumentTitle","longBreak","handleWorkTick","prev","handleRestTick","restTimeout","workTimeout","nextCount","next","handleStart","handleStop","handleDone","Settings","storedSettings","setSettings","handleChange","name","isNaN","goBack","valueAsNumber","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.ccfa97a6.chunk.js","sourcesContent":["import { AppAction, AppStatus } from 'app-types';\nimport * as React from 'react';\n\nexport interface AppState {\n  count: number\n  status: AppStatus\n  nextAction: AppAction\n  workMs: number\n  breakMs: number\n}\n\nconst initialAppState: AppState = {\n  count: 0,\n  status: 'idle',\n  nextAction: 'work',\n  workMs: 0,\n  breakMs: 0,\n}\n\nconst AppStateContext = React.createContext<\n  [AppState, React.Dispatch<React.SetStateAction<AppState>>] | null\n>(null)\nAppStateContext.displayName = 'AppStateContext'\n\nfunction AppStateProvider(props: any) {\n  const [appState, setAppState] = React.useState<AppState>(initialAppState)\n\n  const value: [\n    AppState,\n    React.Dispatch<React.SetStateAction<AppState>>\n  ] = React.useMemo(() => [appState, setAppState], [appState])\n\n  return <AppStateContext.Provider {...props} value={value} />\n}\n\nfunction useAppState() {\n  const context = React.useContext(AppStateContext)\n  if (!context) {\n    throw new Error('useAppState must be used within the AppStateProvider')\n  }\n  return context\n}\n\nexport { AppStateProvider, useAppState, initialAppState }\n","import { AppStatus } from './app-types';\n\nexport const appStatusTitles: Record<AppStatus, string> = {\n  idle: '💤',\n  break: '☕️',\n  work: '🏗',\n}\n","const format2digits = (num: number, minimumIntegerDigits = 2) =>\n  num.toLocaleString(undefined, { minimumIntegerDigits })\n\nconst msToSecs = (ms: number) => Math.floor(ms / 1000) % 60\nconst msToMins = (ms: number) => Math.floor(ms / 1000 / 60) % 60\nconst msToHours = (ms: number) => Math.floor(ms / 1000 / 60 / 60)\n\nfunction replace<T>(arr: T[], index: number, ...items: T[]) {\n  const arrCopy = [...arr]\n  arrCopy.splice(index, items.length, ...items)\n  return arrCopy\n}\n\nfunction getTimeString(ms: number) {\n  const hours = format2digits(msToHours(ms))\n  const mins = format2digits(msToMins(ms))\n  const secs = format2digits(msToSecs(ms))\n\n  return `${hours}:${mins}:${secs}`\n}\n\nexport { format2digits, msToHours, msToMins, msToSecs, replace, getTimeString }\n","/* eslint-disable import/no-unresolved */\nimport * as React from 'react';\nimport Worker from 'worker-loader!../workers/timer.worker';\nimport { WorkerMessage } from 'workers/worker-message';\n\nexport type TimerStatus = 'idle' | 'running' | 'finished'\n\nconst worker = new Worker()\nconst DEFAULT_INTERVAL_MS = 1000\n\nexport type TimerHandler = () => void\nexport type TickHandler = (remainingMs: number) => void\n\nfunction useTimer(initialTimeout = 0, interval = DEFAULT_INTERVAL_MS) {\n  const [remainingMs, setRemainingMs] = React.useState<number>(initialTimeout)\n  const timeoutHandlerRef = React.useRef<TimerHandler>()\n  const tickHandlerRef = React.useRef<TickHandler>()\n  const [status, setStatus] = React.useState<TimerStatus>('idle')\n\n  React.useEffect(() => {\n    setRemainingMs(initialTimeout)\n  }, [initialTimeout])\n\n  worker.onmessage = (e: MessageEvent<number>) => {\n    const remaining = e.data\n    if (remaining >= 0) {\n      setRemainingMs(remaining)\n      tickHandlerRef.current?.(remaining)\n    } else {\n      setStatus('finished')\n      timeoutHandlerRef.current?.()\n    }\n  }\n\n  const stop = React.useCallback(() => {\n    const message: WorkerMessage = {\n      action: 'stop',\n    }\n    worker.postMessage(message)\n    setStatus('idle')\n  }, [])\n\n  const start = React.useCallback(\n    (timeout: number, onTimeout: () => void, onTick?: () => void) => {\n      const message: WorkerMessage = {\n        action: 'start',\n        timeout,\n        interval,\n      }\n      worker.postMessage(message)\n      setStatus('running')\n      setRemainingMs(timeout)\n      timeoutHandlerRef.current = onTimeout\n      tickHandlerRef.current = onTick\n    },\n    [interval]\n  )\n\n  const reset = React.useCallback((timeout: number) => {\n    setStatus('idle')\n    setRemainingMs(timeout)\n  }, [])\n\n  return { remainingMs, status, start, stop, reset }\n}\n\nexport { DEFAULT_INTERVAL_MS, useTimer }\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/timer.worker.f753f27a.worker.js\");\n}\n","import { useLocalStorage } from 'hooks';\nimport * as React from 'react';\n\nexport interface AppSettings {\n  longBreakInterval: number\n  shortBreakInterval: number\n  workInterval: number\n  workIntervalsCountBeforeLongBreak: number\n}\n\nexport type SettingsContextValueType = [\n  AppSettings,\n  (settings: AppSettings) => void\n]\n\nconst defaultSettings: AppSettings = {\n  longBreakInterval: 900000, // 15mins\n  shortBreakInterval: 300000, // 5mins\n  workInterval: 1500000, // 25mins\n  workIntervalsCountBeforeLongBreak: 4,\n}\n\nconst SettingsContext = React.createContext<SettingsContextValueType | null>(\n  null\n)\nSettingsContext.displayName = 'SettingsContext'\n\nfunction SettingsProvider(props: any) {\n  const [settings, saveSettings] = useLocalStorage(\n    'gk.greenz.pomodoro.settings',\n    defaultSettings\n  )\n\n  const value: SettingsContextValueType = React.useMemo(\n    () => [settings, saveSettings],\n    [saveSettings, settings]\n  )\n\n  return <SettingsContext.Provider {...props} value={value} />\n}\n\nfunction useSettings() {\n  const context = React.useContext(SettingsContext)\n  if (!context) {\n    throw new Error('useSettings must be used within the SettingsProvider')\n  }\n  return context\n}\n\nexport { SettingsProvider, useSettings, defaultSettings }\n","import * as React from 'react';\n\nexport function useLocalStorage<T>(\n  key: string,\n  defaultValue: T\n): [T, (item: T) => void] {\n  const [item, setItem] = React.useState<T>(defaultValue)\n\n  React.useEffect(() => {\n    const loadedItem = localStorage.getItem(key)\n    if (loadedItem) {\n      setItem(JSON.parse(loadedItem))\n    }\n  }, [key])\n\n  React.useEffect(() => {\n    const handleStorage = (e: StorageEvent) => {\n      if (e.key !== key) return\n      setItem(e.newValue ? JSON.parse(e.newValue) : undefined)\n    }\n\n    window.addEventListener('storage', handleStorage)\n    return () => window.removeEventListener('storage', handleStorage)\n  }, [key])\n\n  const saveItem = React.useCallback(\n    (newItem: T) => {\n      localStorage.setItem(key, JSON.stringify(newItem))\n      setItem(newItem)\n    },\n    [key]\n  )\n\n  return [item, saveItem]\n}\n","import * as React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { AppStateProvider } from './app-state-context';\nimport { SettingsProvider } from './settings-context';\n\nexport const AppProviders: React.FC = ({ children }) => (\n  <Router basename=\"/pomidorka\">\n    <AppStateProvider>\n      <SettingsProvider>{children}</SettingsProvider>\n    </AppStateProvider>\n  </Router>\n)\n","import clsx from 'clsx';\n\nimport { MuiProps } from './props';\n\nexport type ButtonProps = MuiProps<\n  React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >\n>\n\nconst ContainedButton: React.FC<ButtonProps> = ({\n  primary,\n  secondary,\n  className,\n  ...props\n}) => (\n  <button\n    className={clsx(\n      'px-4 py-2 border-none rounded uppercase shadow-md hover:shadow-lg active:shadow-2xl',\n      primary &&\n        'bg-primary text-on-primary hover:bg-primary-dark active:bg-primary-light',\n      secondary &&\n        'bg-secondary text-on-secondary hover:bg-secondary-dark active:bg-secondary-light',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst OutlinedButton: React.FC<ButtonProps> = ({\n  primary,\n  secondary,\n  className,\n  ...props\n}) => (\n  <button\n    className={clsx(\n      'px-4 py-2 border border-solid rounded uppercase',\n      primary && 'bg-primary text-on-primary hover:bg-primary-light',\n      secondary && 'bg-secondary text-on-secondary hover:bg-secondary-light',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst TextButton: React.FC<ButtonProps> = ({\n  primary,\n  secondary,\n  className,\n  ...props\n}) => (\n  <button\n    className={clsx(\n      'px-2 py-1 uppercase',\n      primary && 'text-primary',\n      secondary && 'text-secondary',\n      className\n    )}\n    {...props}\n  />\n)\n\nconst IconButton: React.FC<ButtonProps> = ({\n  primary,\n  secondary,\n  className,\n  ...props\n}) => {\n  return (\n    <button\n      className={clsx(\n        'rounded-full p-3',\n        !primary && !secondary && 'hover:bg-hover',\n        primary && 'text-on-primary hover:bg-primary-light',\n        secondary && 'text-on-secondary hover:bg-secondary-light',\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { ContainedButton, OutlinedButton, TextButton, IconButton }\n","import clsx from 'clsx';\n\nimport { ButtonProps, IconButton } from './Button';\nimport { MuiProps } from './props';\n\nconst AppBar: React.FC<MuiProps> = ({\n  className,\n  primary = true,\n  secondary,\n  children,\n}) => {\n  return (\n    <header\n      className={clsx(\n        'shadow-md flex flex-row items-center gap-4',\n        primary && 'bg-primary text-on-primary',\n        secondary && 'bg-secondary text-on-secondary',\n        className\n      )}\n    >\n      {children}\n    </header>\n  )\n}\n\nexport type AppBarTitleProps = React.DetailedHTMLProps<\n  React.HtmlHTMLAttributes<HTMLHeadingElement>,\n  HTMLHeadingElement\n>\nconst AppBarTitle: React.FC<AppBarTitleProps> = ({\n  children,\n  className,\n  ...props\n}) => (\n  <h6 className={clsx('flex-1 p-4', className)} {...props}>\n    {children}\n  </h6>\n)\n\nconst AppBarAction: React.FC<ButtonProps> = ({ className, ...props }) => (\n  <IconButton\n    className={clsx(\n      'text-2xl outline-none focus:outline-none focus:border-none',\n      className\n    )}\n    {...props}\n  />\n)\n\nexport { AppBar, AppBarTitle, AppBarAction }\n","import clsx from 'clsx';\n\nimport { ClassNameProps } from './props';\n\nexport const Card: React.FC<ClassNameProps> = ({ className, children }) => (\n  <div\n    className={clsx(\n      'p-4 rounded shadow-md bg-surface text-on-surface',\n      className\n    )}\n  >\n    {children}\n  </div>\n)\n","import clsx from 'clsx';\nimport * as React from 'react';\n\nimport { MuiProps } from './props';\n\nexport interface CircularProgressProps {\n  value: number\n  max?: number\n  strokeWidth?: number\n}\n\nconst strokeDasharray = 283 // circumference = 2 * 3.1415927 * circleRadius\n\nexport const CircularProgress: React.FC<MuiProps<CircularProgressProps>> = ({\n  value,\n  max = 100,\n  strokeWidth = 1,\n  primary,\n  secondary,\n  className,\n  children,\n}) => {\n  const percentage = value / max\n  const strokeDashoffset = strokeDasharray - strokeDasharray * percentage\n\n  return (\n    <div className={clsx('relative text-center', className)}>\n      <svg\n        className={clsx(\n          primary && 'text-primary',\n          secondary && 'text-secondary'\n        )}\n        viewBox=\"0 0 100 100\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <circle\n          strokeDasharray={strokeDasharray}\n          strokeDashoffset={strokeDashoffset}\n          strokeWidth={strokeWidth}\n          strokeLinecap=\"round\"\n          className=\"fill-transparent transform origin-center -rotate-90 stroke-current\"\n          cx=\"50\"\n          cy=\"50\"\n          r=\"45\"\n        />\n      </svg>\n      {children && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n          {children}\n        </div>\n      )}\n    </div>\n  )\n}\n","import clsx from 'clsx';\nimport { CircularProgress } from 'components';\n\nimport { format2digits, msToMins, msToSecs } from '../utils';\n\nexport interface DigitalWatchFaceProps {\n  ms: number\n  max: number\n}\n\nexport function DigitalWatchFace({ ms, max }: DigitalWatchFaceProps) {\n  const secs = format2digits(msToSecs(ms))\n  const mins = format2digits(msToMins(ms))\n  const isDone = ms === 0 ? 'text-red-500' : ''\n\n  return (\n    <CircularProgress\n      secondary\n      value={ms}\n      max={max}\n      className=\"w-full max-w-md\"\n    >\n      <div className={clsx('text-8xl sm:text-9xl', isDone && 'text-red-500')}>\n        <div>{mins}</div>\n        <div>{secs}</div>\n      </div>\n    </CircularProgress>\n  )\n}\n","import clsx from 'clsx';\nimport * as React from 'react';\n\nexport const TextField = React.forwardRef<\n  HTMLInputElement,\n  React.DetailedHTMLProps<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >\n>(({ className, ...props }, ref) => {\n  return (\n    <input\n      className={clsx(\n        'border-b rounded-none focus:border-primary-light border-on-bg',\n        props.type === 'text' ? 'px-2' : 'pl-2',\n        className\n      )}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nTextField.displayName = 'TextField'\n","import * as React from 'react';\nimport { format2digits, msToHours, msToMins, msToSecs } from 'utils';\n\nimport { TextField } from './TextField';\n\nexport interface DurationProps {\n  value?: number\n  onChange?: (ms: number) => void\n}\n\nexport function Duration({ value, onChange }: DurationProps) {\n  const [ms, setMs] = React.useState(0)\n\n  const hoursRef = React.createRef<HTMLInputElement>()\n  const minsRef = React.createRef<HTMLInputElement>()\n  const secsRef = React.createRef<HTMLInputElement>()\n\n  React.useEffect(() => {\n    if (!value) return\n    setMs(value)\n  }, [value])\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.value.match(/^\\d+$/g)) return\n\n    const hours = Number(hoursRef.current?.value ?? 0)\n    const mins = Number(minsRef.current?.value ?? 0)\n    const secs = Number(secsRef.current?.value ?? 0)\n\n    const value = ((hours * 60 + mins) * 60 + secs) * 1000\n\n    setMs(value)\n    onChange?.(value)\n  }\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select()\n  }\n\n  const textFieldProps = {\n    className: 'w-10',\n    type: 'text',\n    placeholder: '00',\n    min: 0,\n    onChange: handleChange,\n    onFocus: handleFocus,\n  }\n\n  const hours = format2digits(msToHours(ms))\n  const mins = format2digits(msToMins(ms))\n  const secs = format2digits(msToSecs(ms))\n\n  return (\n    <div className=\"flex flex-row-reverse gap-1\">\n      <TextField {...textFieldProps} value={secs} ref={secsRef} />\n      <span>:</span>\n      <TextField {...textFieldProps} value={mins} ref={minsRef} />\n      <span>:</span>\n      <TextField {...textFieldProps} value={hours} ref={hoursRef} />\n    </div>\n  )\n}\n","import * as React from 'react';\n\nimport { ClassNameProps } from './props';\n\nexport interface EmojiProps extends ClassNameProps {\n  symbol: string\n  label: string\n}\n\nconst Emoji = React.memo<EmojiProps>(({ label, symbol, className }) => (\n  <span className={className} role=\"img\" aria-label={label}>\n    {symbol}\n  </span>\n))\nEmoji.displayName = 'Emoji'\n\nexport { Emoji }\n","export const Footer: React.FC = () => (\n  <footer className=\"pb-4 text-center text-xs\">\n    &#169; All rights reserved, {new Date().getFullYear()}\n  </footer>\n)\n","import clsx from 'clsx';\nimport * as React from 'react';\n\nimport { ClassNameProps } from './props';\n\nexport const Form: React.FC<\n  React.DetailedHTMLProps<\n    React.FormHTMLAttributes<HTMLFormElement>,\n    HTMLFormElement\n  >\n> = props => <form {...props} />\n\nexport interface FormItemProps extends ClassNameProps {\n  label: string\n  col?: boolean\n}\n\nexport const FormItem: React.FC<FormItemProps> = ({\n  label,\n  col,\n  className,\n  children,\n}) => (\n  <label className={clsx('flex mb-4 last:mb-0', col && 'flex-col', className)}>\n    <span className={clsx(!col && 'flex-1')}>{label}</span>\n    {children}\n  </label>\n)\n","import { Card, Emoji } from 'components';\nimport * as React from 'react';\nimport { getTimeString } from 'utils';\n\nconst StatCard: React.FC = ({ children }) => (\n  <Card className=\"flex flex-col md:flex-row text-xl md:text-2xl justify-between items-center\">\n    {children}\n  </Card>\n)\n\nconst StatCardHeader: React.FC = ({ children }) => (\n  <h3 className=\"text-3xl\">{children}</h3>\n)\nconst StatCardBody: React.FC = ({ children }) => (\n  <p className=\"text-right m-0\">{children}</p>\n)\n\nexport interface CountStatCardProps {\n  count: number\n}\nconst CountStatCard = React.memo<CountStatCardProps>(({ count }) => (\n  <StatCard>\n    <StatCardHeader>\n      <Emoji symbol=\"🍅\" label=\"tomato\" />\n    </StatCardHeader>\n    <StatCardBody>{count}</StatCardBody>\n  </StatCard>\n))\nCountStatCard.displayName = 'CountStatCard'\n\nexport interface TimeStatCardProps {\n  ms: number\n  type: 'work' | 'break'\n}\n\nconst TimeStatCard = React.memo<TimeStatCardProps>(({ ms, type }) => (\n  <StatCard>\n    <StatCardHeader>\n      {type === 'work' ? (\n        <Emoji symbol=\"🏗\" label=\"crane\" />\n      ) : (\n        <Emoji symbol=\"☕️\" label=\"coffee\" />\n      )}\n    </StatCardHeader>\n    <StatCardBody>{getTimeString(ms)}</StatCardBody>\n  </StatCard>\n))\nTimeStatCard.displayName = 'TimeStatCard'\n\nexport { CountStatCard, TimeStatCard }\n","import { AppBar, AppBarAction, AppBarTitle, Emoji } from 'components';\nimport * as React from 'react';\nimport { FaCog } from 'react-icons/fa';\nimport { useHistory } from 'react-router-dom';\n\nexport const Header = React.memo(() => {\n  const history = useHistory()\n\n  return (\n    <AppBar primary>\n      <AppBarTitle>\n        <Emoji symbol=\"🍅\" label=\"tomato\" /> Another Pomodoro Timer\n      </AppBarTitle>\n      <AppBarAction onClick={() => history.push('/settings')}>\n        <FaCog />\n      </AppBarAction>\n    </AppBar>\n  )\n})\nHeader.displayName = 'Header'\n","import { AppAction } from 'app-types';\nimport { Card, ContainedButton, DigitalWatchFace } from 'components';\nimport { initialAppState, useAppState } from 'contexts/app-state-context';\nimport { useSettings } from 'contexts/settings-context';\nimport { DEFAULT_INTERVAL_MS, useDocumentTitle, useNotification, useTimer } from 'hooks';\nimport * as React from 'react';\n\nimport { CountStatCard, TimeStatCard } from './cards';\nimport { Header } from './Header';\n\nexport function TimerPage() {\n  const [appState, setAppState] = useAppState()\n  const [settings] = useSettings()\n  const { remainingMs, start, stop, reset, status: timerStatus } = useTimer(\n    settings.workInterval\n  )\n  const notify = useNotification()\n\n  const { count, status, nextAction, workMs, breakMs } = appState\n\n  useDocumentTitle(remainingMs, count, status)\n\n  const max: Record<AppAction, number> = {\n    longBreak: settings.longBreakInterval,\n    break: settings.shortBreakInterval,\n    work: settings.workInterval,\n  }\n\n  const handleWorkTick = React.useCallback(() => {\n    setAppState(prev => ({\n      ...prev,\n      workMs: prev.workMs + DEFAULT_INTERVAL_MS,\n    }))\n  }, [setAppState])\n\n  const handleRestTick = React.useCallback(() => {\n    setAppState(prev => ({\n      ...prev,\n      breakMs: prev.breakMs + DEFAULT_INTERVAL_MS,\n    }))\n  }, [setAppState])\n\n  const restTimeout = React.useCallback(() => {\n    notify(\"It's working time!\")\n    reset(settings.workInterval)\n    setAppState(prev => ({\n      ...prev,\n      count: prev.count + 1,\n      nextAction: 'work',\n      status: 'idle',\n    }))\n  }, [notify, reset, setAppState, settings.workInterval])\n\n  const workTimeout = React.useCallback(() => {\n    notify(\"It's resting time!\")\n    reset(settings.shortBreakInterval)\n\n    const nextCount = count + 1\n\n    const next =\n      nextCount > 0 &&\n      nextCount % settings.workIntervalsCountBeforeLongBreak === 0\n        ? 'longBreak'\n        : 'break'\n    setAppState(prev => ({ ...prev, nextAction: next }))\n  }, [\n    count,\n    notify,\n    reset,\n    setAppState,\n    settings.shortBreakInterval,\n    settings.workIntervalsCountBeforeLongBreak,\n  ])\n\n  const handleStart = () => {\n    switch (nextAction) {\n      case 'work':\n        setAppState(prev => ({ ...prev, status: 'work' }))\n        start(settings.workInterval, workTimeout, handleWorkTick)\n        break\n      case 'break':\n        setAppState(prev => ({ ...prev, status: 'break' }))\n        start(settings.shortBreakInterval, restTimeout, handleRestTick)\n        break\n      case 'longBreak':\n        setAppState(prev => ({ ...prev, status: 'break' }))\n        start(settings.longBreakInterval, restTimeout, handleRestTick)\n        break\n    }\n  }\n\n  const handleStop = () => {\n    stop()\n    const timeout =\n      status === 'work'\n        ? settings.workInterval\n        : nextAction === 'break'\n        ? settings.shortBreakInterval\n        : settings.longBreakInterval\n\n    setAppState(prev => ({\n      ...prev,\n      status: 'idle',\n      workMs:\n        status === 'work' ? prev.workMs - timeout + remainingMs : prev.workMs,\n      breakMs:\n        status !== 'work' ? prev.breakMs - timeout + remainingMs : prev.breakMs,\n    }))\n    reset(timeout)\n  }\n\n  const handleDone = () => {\n    setAppState(initialAppState)\n    reset(settings.workInterval)\n  }\n\n  function renderButtons() {\n    if (timerStatus === 'running') {\n      return (\n        <ContainedButton secondary onClick={handleStop}>\n          Cancel\n        </ContainedButton>\n      )\n    }\n\n    return (\n      <>\n        <ContainedButton primary onClick={handleStart}>\n          {nextAction === 'work' ? (count > 0 ? 'Next' : 'Start') : 'Rest'}\n        </ContainedButton>\n        {nextAction === 'work' && count > 0 && (\n          <ContainedButton secondary onClick={handleDone}>\n            Done\n          </ContainedButton>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Header />\n      <main className=\"flex-1 flex px-4 flex-col w-full md:container md:mx-auto gap-4\">\n        <div className=\"grid grid-cols-3 grid-rows-1 gap-4\">\n          <CountStatCard count={count} />\n          <TimeStatCard ms={workMs} type=\"work\" />\n          <TimeStatCard ms={breakMs} type=\"break\" />\n        </div>\n        <Card className=\"flex-1 flex flex-col items-stretch justify-between\">\n          <div className=\"flex-1 flex justify-center items-center\">\n            <DigitalWatchFace ms={remainingMs} max={max[nextAction]} />\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex justify-center px-4 gap-4\">\n            {renderButtons()}\n          </div>\n        </Card>\n      </main>\n    </>\n  )\n}\n","import * as React from 'react';\n\nexport function useNotification() {\n  React.useEffect(() => {\n    if (window.Notification && window.Notification.permission === 'default') {\n      window.Notification.requestPermission()\n    }\n  }, [])\n\n  const notify = React.useCallback((title: string, body?: string) => {\n    if (window.Notification && window.Notification.permission === 'granted') {\n      new Notification(title, { body: body })\n    }\n  }, [])\n\n  return notify\n}\n","import { appStatusTitles } from 'app-constants';\nimport { AppStatus } from 'app-types';\nimport * as React from 'react';\n\nimport { format2digits, msToMins, msToSecs } from '../utils';\n\nexport function useDocumentTitle(\n  remainingMs: number,\n  count: number,\n  status: AppStatus\n) {\n  React.useEffect(() => {\n    const secs = format2digits(msToSecs(remainingMs))\n    const mins = format2digits(msToMins(remainingMs))\n    const countdown = status !== 'idle' ? `${mins}:${secs} | ` : ''\n    document.title = `${count} | ${countdown}${appStatusTitles[status]} - Another Pomodoro Timer`\n  }, [count, remainingMs, status])\n}\n","import {\n    AppBar, AppBarAction, AppBarTitle, Card, ContainedButton, Duration, Form, FormItem, TextField\n} from 'components';\nimport { defaultSettings, useSettings } from 'contexts/settings-context';\nimport * as React from 'react';\nimport { FaArrowLeft } from 'react-icons/fa';\nimport { useHistory } from 'react-router-dom';\n\nexport function Settings() {\n  const [storedSettings, saveSettings] = useSettings()\n  const [settings, setSettings] = React.useState(storedSettings)\n  const history = useHistory()\n\n  React.useEffect(() => {\n    setSettings(storedSettings)\n  }, [storedSettings])\n\n  const handleChange = (name: string, value: number) =>\n    setSettings(prev => ({ ...prev, [name]: Number.isNaN(value) ? 0 : value }))\n\n  return (\n    <>\n      <AppBar>\n        <AppBarAction onClick={() => history.goBack()}>\n          <FaArrowLeft />\n        </AppBarAction>\n        <AppBarTitle>Settings</AppBarTitle>\n      </AppBar>\n      <main className=\"flex-1 px-4 container mx-auto\">\n        <Card>\n          <Form>\n            <FormItem label=\"Work Interval\">\n              <Duration\n                value={settings.workInterval}\n                onChange={ms => handleChange('workInterval', ms)}\n              />\n            </FormItem>\n            <FormItem label=\"Short Break Interval\">\n              <Duration\n                value={settings.shortBreakInterval}\n                onChange={ms => handleChange('shortBreakInterval', ms)}\n              />\n            </FormItem>\n            <FormItem label=\"Long Break Interval\">\n              <Duration\n                value={settings.longBreakInterval}\n                onChange={ms => handleChange('longBreakInterval', ms)}\n              />\n            </FormItem>\n            <FormItem label=\"Long break after\">\n              <TextField\n                type=\"number\"\n                min=\"1\"\n                value={settings.workIntervalsCountBeforeLongBreak}\n                className=\"w-10\"\n                onChange={e =>\n                  handleChange(\n                    'workIntervalsCountBeforeLongBreak',\n                    e.target.valueAsNumber\n                  )\n                }\n              />\n            </FormItem>\n          </Form>\n          <div className=\"flex flex-row justify-end gap-4\">\n            <ContainedButton primary onClick={() => saveSettings(settings)}>\n              Save\n            </ContainedButton>\n            <ContainedButton\n              secondary\n              onClick={() => setSettings(defaultSettings)}\n            >\n              Restore\n            </ContainedButton>\n          </div>\n        </Card>\n      </main>\n    </>\n  )\n}\n","import { Settings, TimerPage } from 'pages';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Footer } from './components';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen min-w-min flex flex-col gap-4 text-on-bg bg-background\">\n      <Switch>\n        <Route path=\"/settings\">\n          <Settings />\n        </Route>\n        <Route path=\"/\">\n          <TimerPage />\n        </Route>\n      </Switch>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport { AppProviders } from 'contexts';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProviders>\n      <App />\n    </AppProviders>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}